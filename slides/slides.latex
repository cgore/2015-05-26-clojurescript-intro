% Copyright (c) 2015, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}


\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.2,0.2,0.2}
\definecolor{keywordcolor}{rgb}{0.1,0.3,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\footnotesize\ttfamily,
  language=Lisp,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.5in,keepaspectratio=true]{#1}
  \end{center}
}

\title{\psshadowbox{ClojureScript Introduction}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Tuesday, May 26, {\smaller AD} 2015} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{STLClojure.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


\begin{slide}
  \h{Why ClojureScript?}

  Have you ever seen JavaScript?

  \fullSlideImage{200-percent-mad.eps}
\end{slide}


\begin{slide}
  \h{Why ClojureScript?}

  Have you ever seen Clojure?

  \fullSlideImage{200-percent-glad.eps}
\end{slide}


\begin{slide}
  \h{Why I Care}

  I have a side project that I'm writing in Ruby on Rails.

  The backend is mostly done, but I need to make a nicer frontend for it.

  This means JavaScript needs to happen somehow.
\end{slide}


\begin{slide}
  \h{How I'm going to do stuff.}

  \begin{itemize}
  \item I'm using Leiningen for the projects:\\
    \texttt{http://leiningen.org/}

  \item I'm using \texttt{cljs-kickoff} to template the project:\\
    \texttt{https://github.com/konrad-garus/cljs-kickoff}

  \item That uses \texttt{lein-cljsbuild}:\\
    \texttt{https://github.com/emezeske/lein-cljsbuild}

  \item And also \texttt{lein-ring}:\\
    \texttt{https://github.com/weavejester/lein-ring}
  \end{itemize}
\end{slide}


\begin{slide}
  \h{ClojureScript History}

  \begin{description}
    \item[1958] LISP
    \item[1969] ARPANET
    \item[1984] Common Lisp
    \item[1990] WWW
    \item[1994] Netscape Navigator
    \item[1995] JavaScript
    \item[2007] Clojure
    \item[2012?] ClojureScript
  \end{description}
\end{slide}


\begin{slide}
  \h{\texttt{cljs-kickoff}}

  There is some real work to standing up the file structure for any Clojure
  project, and ClojureScript is no exception.  That's where
  \texttt{cljs-kickoff}\footnote{\texttt{https://github.com/konrad-garus/cljs-kickoff}}
  comes in: it sets up a minimal Leiningen template for ClojureScript with
  \texttt{lein-cljsbuild}.

  \shell{lein new cljs-kickoff hello-world}
\end{slide}


\begin{slide}
  \h{\texttt{cljs-kickoff}}

  \dirtree{%
    .1 hello-world. 
       .2 {project.clj}. 
       .2 resources. 
          .3 public. 
             .4 css. 
                .5 {page.css}. 
             .4 {help.html}. 
       .2 src. 
          .3 clj. 
             .4 hello\_world. 
                .5 {server.clj}. 
          .3 cljs. 
             .4 hello\_world. 
                .5 {client.cljs}. 
  }
\end{slide}


\begin{slide}
  \h{\texttt{lein-cljsbuild}}

  Your beautiful ClojureScript code needs to be \textit{``compiled''} (air
  quotes) into ugly JavaScript to actually work, and you can use
  \texttt{lein-cljsbuild}\footnote{\texttt{https://github.com/emezeske/lein-cljsbuild}}
  does that for you automatically whenever you change a relevant file.
  
  \textit{On a dedicated shell session:}

  \shell{lein cljsbuild auto}
\end{slide}


\begin{slide}
  \h{\texttt{lein-ring}}

  You will want a simple web server to put up your ClojureScript, and you
  probably want it in Clojure.
  Ring\footnote{\texttt{https://github.com/ring-clojure/ring}}
  is a popular one, loosely similar in
  approach to Ruby's Rack, and
  \texttt{lein-ring}\footnote{\texttt{https://github.com/weavejester/lein-ring}}
  provides a lot of nice Leiningen shortcuts for Ring.

  \textit{On a dedicated shell session:}

  \shell{lein ring server}
\end{slide}


\begin{slide}
  \h{Hello, World!}

  \fullSlideImage{hello-world-1.eps}
\end{slide}


\begin{slide}
  \h{Hello, World!}

  \fullSlideImage{hello-world-2.eps}
\end{slide}


\begin{slide}
  \h{Hello, World!}

  \fullSlideImage{hello-world-3.eps}
\end{slide}


\begin{slide}
  \h{\texttt{project.clj}: Dependencies}

\begin{lstlisting}
(defproject hello-world "0.1.0-SNAPSHOT"
  ;; ...
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [org.clojure/clojurescript "0.0-2156"]
                 [ring "1.2.1"]]
  ;; ...
  )
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{project.clj}: Plugins}

\begin{lstlisting}
(defproject hello-world "0.1.0-SNAPSHOT"
  ;; ...
  :plugins [[lein-cljsbuild "1.0.2"]
            [lein-ring "0.8.10"]]
  ;; ...
  )
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{project.clj}: ClojureScript Build}

\smaller
\begin{lstlisting}
(defproject hello-world "0.1.0-SNAPSHOT"
  ;; ...
  :hooks [leiningen.cljsbuild]
  :source-paths ["src/clj"]
  :cljsbuild { 
    :builds {
      :main {
        :source-paths ["src/cljs"]
        :compiler {:output-to "resources/public/js/cljs.js"
                   :optimizations :simple
                   :pretty-print true}
        :jar true}}}
  ;; ...
  )
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{project.clj}: Ring Server}

\begin{lstlisting}
(defproject hello-world "0.1.0-SNAPSHOT"
  ;; ...
  :main hello-world.server
  :ring {:handler hello-world.server/app})
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{src/clj/hello\_world/server.clj}}

  This is pretty boring, a really simple server with a single static page.  The
  most important part is the \texttt{script} directive.

\begin{lstlisting}
(defn render-app []
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body
   (str "<!DOCTYPE html>"
        ;; ...
        "<p id=\"clickable\">Click me!</p>"
        ;; ...
        "<script src=\"js/cljs.js\"></script>"
        ;; ...
        )})
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{src/cljs/hello\_world/client.cljs}}

\begin{lstlisting}
(ns hello-clojurescript)

(defn handle-click []
  (js/alert "Hello!"))

(def clickable (.getElementById js/document "clickable"))
(.addEventListener clickable "click" handle-click)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{ClojureScript is Clojure!}

  ClojureScript is great!
  Everything you can do in Clojure, you can do in ClojureScript!%
  \footnote{Except for when you can't.}

\begin{lstlisting}
(+ 1 2 3)

(defn add2 [x]
  (+ x 2))

(def foo 42)

(defn average [x y]
  (/ (+ x y)
     2))

(map + [1 2 3]
       [4 5 6])
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{You Can Get to JavaScript if You Need It}

  Just like Java is hiding just under the covers of Clojure,
  you have JavaScript hiding just under the covers of ClojureScript.
  You can easily get to anything in JavaScript from ClojureScript.

\begin{lstlisting}
;; console.log("hi!")
(.log js/console "hi!")
;; document.getElementById("clickable")
(.getElementById js/document "clickable")
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{ClojureScript Web REPL}

  There is an online ClojureScript REPL at \texttt{clojurescript.net}.

  \fullSlideImage{ClojureScript-web-REPL.eps}
\end{slide}


\begin{slide}
  \h{Calling JavaScript Methods}

  You can easily call methods on JavaScript objects from ClojureScript.

\begin{lstlisting}
;; Basic form
(.the-method target-object args ...)
;; document.getElementById("clickable")
(def clickable (.getElementById js/document "clickable"))
;; clickable.addEventListener("click", handle-click)
(.addEventListener clickable "click" handle-click)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Accessing JavaScript Properties}

  You can easily access the properties of JavaScript objects from ClojureScript.

\begin{lstlisting}
;; Basic form
(.-property target-object -property)
;;  document.title
(.-title js/document) ; => "Some String"
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Setting JavaScript Properties}

  You can easily set the properties of JavaScript objects from ClojureScript.

\begin{lstlisting}
;; Basic form
(set! (.-property target-object) new-value)
;; document.title = "Hi There"
(set! (.-title js/document) "Hi There")
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Direct JavaScript}

  JavaScript has an \texttt{eval} function, and we can get to it from
  ClojureScript.

\begin{lstlisting}
(js/eval "2+2") ; => 4
(js/eval "document.title = \"Hi there\"")
(js/eval "x = 123")
js/x ; => 123
(js/eval "Math.random()") ; => 0.9831978017934505
(rand) ; You would probably do this instead.
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Using External JavaScript Libraries}

  You can easily use existing JavaScript libraries from ClojureScript.

  \fullSlideImage{jQuery-in-ClojureScript.eps}
\end{slide}


\begin{slide}
  \h{ClojureScript REPL in Emacs}

  A web REPL is nice, but to do real work I need a real REPL in a real text
  editor\footnote{That means Emacs or Vim, and since this is a Lisp, Emacs
    thanks to nepotism.}.  We can use the Austin%
  \footnote{\texttt{https://github.com/cemerick/austin}}
  plugin for this.
  Add the following to your \texttt{project.clj}%
  \footnote{An example working project is in the Austin repo.  The versions from
  \texttt{cljs-kickoff} don't seem to play well with Austin.}
 file:

\begin{lstlisting}
:profiles {:dev {:plugins [[com.cemerick/austin "0.1.6"]]}}
\end{lstlisting}

  Then run \texttt{lein repl} (or the nREPL inside of Emacs) in the project and launch:

\begin{lstlisting}
(cemerick.austin.repls/exec)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{ClojureScript Koans: \texttt{clojurescriptkoans.com}}

  \fullSlideImage{ClojureScriptKoans.eps}
\end{slide}


\begin{slide}
  \h{Modern ClojureScript}

  A really nice set of tutorials is \textit{Modern ClojureScript}, available
  at:\\
  \texttt{https://github.com/magomimmo/modern-cljs}
\end{slide}


\begin{slide}
  \h{ClojureScript: Up and Running}

  This seems to be the only book out there, from 2012.

  \fullSlideImage{ClojureScript-Up-And-Running.eps}
\end{slide}


\begin{slide}
  \h{Variables}

\begin{lstlisting}
;; Top-level variables.
(def foo "bar") ; var foo = "bar"
;; Local variables.
(defn foo []       ; function foo() {
  (let [bar 1      ;    var bar = 1;
        baz 2]     ;    var baz = 2;
    (+ bar baz 3)) ;    return bar + baz + 3;
                   ; }
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Destructuring Bind}

\begin{lstlisting}
(def m {:first "Robert"      ; var m = {first: "Robert",
        :last "Rogers"       ;          last: "Rogers",
        :born "11/07/1731"   ;          born: "11/07/1731",
        :died "05/18/1795"}) ;          died: "05/18/1795"};
(let [{:keys [first last born] m}] ; var first = m.first
                                   ; var last = m.last
                                   ; var born = m.born
  ;; first + " " + last + " was born on " + born + ".";
  (str first " " last " was born on " born "."))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Arrays}

  In JavaScript:

\begin{lstlisting}[language=Java]
var a = new Array();
var b = [];
var c = [1 2 3];
c[1] // => 2
\end{lstlisting}

  In ClojureScript:

\begin{lstlisting}
(def a (array))
(def b (array 1 2 3))
(nth b 1) ; => 2
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Other Collections}

  In ClojureScript there are also immutable vectors, immutable lists, and
  immutable sets, not just arrays:

\begin{lstlisting}
;; Lists
(def l (list))
(def m '())
(def n (list 1 2 3))
(def o '(1 2 3)) ; n = o
;; Vectors
(def v (vector))
(def u [])
(def w [1 2 3])
;; Sets
(def s #{1 2 3})
(def t #{1 1 1 2 2 2 3 3 3}) ; s = t
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Hash Maps}

  In JavaScript:

\begin{lstlisting}[language=Java]
var m = { // Keys must all be strings
  "foo": 1,
  "bar": 2
};
m["foo"];
m.foo;
\end{lstlisting}

  In ClojureScript:

\begin{lstlisting}
(def m {:foo    1
        :bar    2
        12      3   ; Non-string keys
        [1 2 3] 4}) ; Anything can be a key
(get m :foo)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Functions with Variadic Arguments}

  In JavaScript, you need to manipulate the arguments object yourself.
  In ClojureScript, you can do this:

\begin{lstlisting}
(defn foo
  ([]
   "no arguments")
  ([x]
   (str "one argument - x = " x))
  ([x y]
   (str "two arguments - x+y = " (+ x y))))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Named Parameters and Default Values}

  You can't do this in JavaScript.

\begin{lstlisting}
(defn foo [x y ; Positional arguments
           & {:keys [bar baz]}] ; Keyword arguments
  (+ x y bar baz))
(foo 1 2 :bar 3 :baz 4) ; => 10
(defn foo2 [x y
            & {:keys [bar baz]
               :or {bar 100     ; Default for bar
                    baz 1000}}] ; Default for baz
  (+ x y bar baz))
(foo2 1 2) ; => 1103
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{My Project's Layout?}

  \begin{enumerate}
    \item The backend is in Ruby on Rails.
    \item Single/multiple ClojureScript project(s)?
    \item Single/multiple git repos?
    \item JavaScript too, or just ClojureScript?
    \item Other pitfalls?
  \end{enumerate}
\end{slide}


\begin{slide}
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
  \end{center}
\end{slide}


\end{document}
